// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AAD//y4Rbh+ZnAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
