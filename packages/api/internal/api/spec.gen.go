// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+x9W2/cOLLwXyH0fQ/nAB2348kOzhrYB8fJ7BrjzBqxnT1AxhjQUnU31xKpISnbvUb/",
	"9wPeJEqiLt3u9iXJU2KJIot1Y1WxqvohilmWMwpUiujwIcoxxxlI4PovHMcgxAW7AXryQT0gNDqMciwX",
	"0SSiOIPosDFmEnH4syAckuhQ8gImkYgXkGH1sVzm6gMhOaHzaLWaRDgnv8Kye2r3er1ZrwuSJp2Turfr",
	"zUlZAp1T2pfrzSgwTa7Zfeek1fv15pWQ5SmW3dB6A9aZeaUGi5xRAZo33u3vq39iRiVQqbklz1MSY0kY",
	"nf5bMKqeVfP9fw6z6DD6f9OK4abmrZh+5Jxxs0YCIuYkV5NEh9F7nCAFIggZrSbRu/23u1/zqJALoNLO",
	"isCMU4u/2/3ivzGJZqygiVnxr7tf8ZjRWUpijd+/PAVNz4HfAnd4XTme00z1XgnnKZt/pJIvtT7iLAcu",
	"ieG5FG4hHVr4lM1P9bjVJMpACDwH9UkdiFM2R/YlctudNHl+EkmSgZA4y9szXLhXiM2QXABK2RyBhnsS",
	"zRjPsIwOowRLeKNmac++8qXvq7dUBfbE7vhqNYmOzy6PWWGo0qDg2SWKGQeBZoxrUKzu8AEhVP50oKYm",
	"lGRFFh2+LQEiVMIcNI8fc8ASkqNKp7eJENsxcgAn5mBAUs2C9Edq0DjcTCKStKc/SZRczghwh3N/DX/q",
	"oiBJaNYMi5sh/qlW+YTFDaHzDyAxSYX63qjQJly/4Qw6IGpzlENqA3MLQLMiTZfIondgogbz6N1q4NwK",
	"dq8Tj1xXFYEvAGdHZye/wnJz+h6dnaAbWK5PWrvAe702TtN/zqLDr/00UfBeCsWjV5OIFmmKr1MwZ9Zo",
	"XrHwjmGTG4OX+oyf8R26xWkB7QlbE6RYyEsBAbhOsZBIYQbJBRElEu+wQIX6oAOJ9T0/C2d3bjfEi2ag",
	"ZUHLmHVO/EDEzTn5D3x6315WvUOC/AeaGg0Rij6R972KbT+k2D7S2y/YGrVJQtQ6OD2r8X0dhI/0lnBG",
	"M6AS3WJOFPJDCraNi4/0NvkCXBAWkHP7wuEU6G2CeEEpoXO1t965J5E5U9sSy5IA7fRgpN8F0NVGUedZ",
	"aVYdIrtdyM2iSNzJb60dKEaB5IuSrjMOM3LfhsI810KiMGW+QLd1fJrDhvEuufTWOS9mwXXM80euk/dv",
	"Qi6wRMRhR7SmRHrCwLxa/5wCnctFQLXo5/0glvRuUM8CXF9hEqBLCIeK1qdESEjOLe+2CIxTggNSdqQe",
	"lxBbxyR4ZqQEqDQ+TQI5h1ipEqcNh1S/+To4b16UVlWf6iytL2XO1jRX31eejltNIqCdhyq6W0BN+tEd",
	"SVME9znhMPpghbrm6bXOvaFa9jPGl8Mb+uTG6W8kTrAcdAQsT3xyw5u+7xDxevShkJj3mCoBrGKB7Eej",
	"sSqk4slxmzzXY1te+NAW3Wg04yxDdwsSLxARNcjt4TnsRvjevR9DKCXIR5snAB4T1Fjc8a1DRJ3NtOg7",
	"h6utS9UXbToCVef01yiB62IeTSJCZyyaRHeYKyPSOIZXAUp88ri0vpB5s4m18Pbgf0KH4W9w1+sEPdYR",
	"aFBNT3dl1u3RoSm7+0MBySnIP8wCIZ2asrsSBZKVkCwAuY8rgK4ZSwFrJYALyc5wIezGZrhIZXQ4w6mA",
	"QIyEZViSGCuXJVcf1dkVzyQYWiixYkV4RaissgFlpYc9UulAXPAA0c71c4TTFImlkJChmGVZQV0A6I7I",
	"RVsJebtYT9Yd2XuPO4c0nxBv/zIJ6TjJUEpug5aygJjRROytay53qxTLon3u4/YciUoorH3bFgdtBRyf",
	"XQYWLLJrg/RyHCoDJeMM4vJDq3dIQPEcZUp51pcxerRH+bSXitNCSODjOMgOHuMVKk4moZCRfu4mZDxe",
	"gJAcy5Cd7xy3X5zp3oXo+lGFZnq8720TKn9+F96//uS80JoK1llFlN+MW6kK5A+hmRqHpm0PGAA6gnEt",
	"QEGUDh6j/sQj2EKUVgWXhM6Hl7QD0blbu7FOeBWJZTGohJUQnpuRyhEZ6eD2s1ZT4N09ioWogetJXeSD",
	"AtpmpTr7duC02lApM07xGJ814HTjeAGJDlgH+FW5QwoHZhTSl04CkaTBA0RCJgK3LSWmMOd4+UNDvEoN",
	"AT18MaQcSsbovemo+dwBpnn5km0E1BelYQnuFNXzcrttN6QQDao5J4QDTpQtknBMFCH0tJRCLM0fBV0A",
	"TuVi2XZJJtH9GzXNm1vMlbEi1HwVIJ/tzNWTD9Ua1cNjf7Xq8WW1bm17xwtM5wFzaH1aN2hkJ1CrfQZR",
	"ZH3RnCf3FJ7ZIF5NolcX2kpYhklAjt9jAci8RHcL4FDDkuR4NiMxIsL6jUSdHiMOEqC3zXvDBkL8+0Ad",
	"XlUU0hHwmsM1IrK1zZj6tmJRLzri0wzZWGbusm1+RGufQXyeIDj8GuXzR2j6R2h6ZGja02ynbB5O+tEZ",
	"OiamV2bcIEwTlBKqcNxIOFIPg/OoNy8wc0gDXMdD4Lo1tU9b2xJtzh7liXhYb7khDWj12h6EnzxZHXc1",
	"774YlMLaIpzEwak4iddkCv8U6vJB1ww1xnlxKSA5izvSuwqdqJYDj4FKkxlWzjpLGfZYkGoY3Ml3wSQO",
	"XMzoxyjRaRY5jkHp4eulbIHb4SKrD8PpLTpzw92drzFjBlkvqFVMdb1Jw1Da66IN4FxHrDOPuR4v2Z42",
	"9Lil2qSHQ49APhd4QnfuDo617uvsoa0EAutkpdAlnV3hMlfb/Gxzd9sJH5ue0J5Qg/gXkQsjwgElV4vC",
	"dGmWcWsr3bFq+cvl/AqxF4CzgCGtM9gDtpZN+3I+qlRfh7IgxQfn7Tan+NcC5AKqz92pbN3jxpSeKz18",
	"QdMFjXo+1moIzdCyB/R0ZX6YRZa/a4fZH7mKnbmK332qoeWeYLprSYsW50BmPd9Grpt67MAoBPDNc5Pt",
	"1wMEDO3IwGbgt0522EWHLicdQm76+MsGfV0xaOPo06nuJCjeUh/LcWaPV6kzhE3F5i6UPytSc6Oi9eec",
	"3CpXqi8csUHYYECzVP5bbe+VK/RM6mXz3LRNU8cUYc5zfEfXRpYmaZ8m2kosIC+u05DpXz8/LVhEIDMe",
	"MY4YTZdeFAddLwNnm3ewCoWFTaWmiYceE3Qj/z2EzkLbaJuRzXy6oVnrBwKqerwR/r4lpi+e/jZ8gWpy",
	"Zo0+NRXXDo86tauvpNq6dw21pYcGj21T5FQ6uNbK+3rVKoHTik55zUhIXsSy4Brvo/zyej1VQNNXkYAR",
	"AKx1hnDAIhQN/GSrroy3rfwMcztnxk9QXHAOVKZLxCFnJp1BS6KORuqc9vISMRgQG74B9GTCuTaaTsa3",
	"ucPEXsa5q8HujMRtyeI4ASn3bYnh8VCLa38hKVzmKcMB/s05CKADPsWMpFof4lSjAdmPXMRW39kG1WDB",
	"A3bVJU+9aLmeWyxYkSboGlCh4YQESTaIGgd7a8OdruajLzM2uXRg8Q1wtc1AiKR857l/3ctvcuZpih1n",
	"ATNV30mjeAHxjY7qY6qwjuAe4kKCI26p76vL2U5FpiO2wbV0is2WVtmy6+nRp4uRvhy8DFbahP5bxpbZ",
	"dgtRmr4hNM0Yj0ekBvja5m7BUkt+TzHoiTTr8IIiDnPMkxREietuJTTjLDvJguVM+rGasxCAsEAYXWPR",
	"lsVuXlRz+45Zw3Jy3z9ihW9PfoWEfMjQKHOj1Ni+9dwqo0wgR49zCXnwcsI+YNf/BlMFX/sigBXIwxCh",
	"nDOdkt+8MMB80Mg64vMiU3BXaStq9XUMLqXNxD+wCFSGqadOZvSwMvTtrdTm8/XFWE21Ffk1T1qytcyr",
	"8HQQ6qYhpd76imsgLP1UzqKC04CyQSo93CH1puSUNfPpXSkEkctzJSNmLS814Kgw1YXXgDnwX5x/Zzb3",
	"hyto0fKlN6WHVasvpNSCdpRkhNYm1M1IFoATk5pq2pH87xs98M1FvVDGBoPVPPp/Q3Ocnbz51cdB9f15",
	"kWOlf9+OgcUN7gbHjTjQlBs7W40N3GSKFLr2SYk3kcpYjD4evFcE9dIcD6P9vbd7+2ptlgPFOYkOo5/2",
	"9vf29UWMXGj6TQ153mjyGF5mInSbaJJiMaJw16xRUrynw+MnSXQYnTEhPa4QtlsMCPmeJcut9QlpVFo1",
	"rllsWKvWeeZgi11gAg0vQi1hWq0sIPGCkenSa04TWq0Ef6oGVY1W+seqQb606tBgiJu/Xq2Uc4rnOgG1",
	"zgha3uvMMX2o9WxaGSZJIWTNfNDPEab9vGKG+dxy1GgL5TeW6ohwVkOm9aZSancNDng3kL9k9vM4ItmG",
	"P0Nj3z0LQXPy5gaWGhtzkB2J5jhNzd2gPSJEi3B/B2n0qxHvGo7X6wU00hgrT7u2KdbuFOQRD3GQBaeQ",
	"BDb1zMIXPBMaJHTkUrbICMXs7y+smD2i7UQn+5R6FpXcBKDpZVUIepEaeT2m8EV6+uD63o3SzP28YhWz",
	"4Zajqp/emurYfThOE9eI89o18drSjWUccMGMtT9ErjP18ZaptX310PJcRmmI/QFGsdc43wmjKIk3BT6d",
	"R/g/9GsT7Akd3OZ9NAbR1uE1ScYlftfDribylLIERlgdZlgA6N/si+3YGuOuzHX9+OrqURaH2dCTHSpN",
	"57nBR+qtZSIN2PTBVNitOinzd5B6D8g22wgT5jdXp7eexrHlfYHTYXv9JL1a3NGEK8v9XqQaGUfjTntR",
	"1wG621M2U5ajqWxsW4tbo+0OTM1mYeOq3Wo2bGRY2joM6PQbPcVrOELGy3ctjbVf6bqiGr+2tiXnfmuA",
	"Bid0pNn/WYBLlpYMzUjqov1VEfN/wd58D/0eFQL43/B1/Huxv3/wM87zv+WcJb9H/72HPuJ4oc95TBPT",
	"R1GgrBASXQO6/HyKgMYsgWRP9wOKDiO9ahVMKxOG+3oUXz3tudKov37cAdMmnmbG/THMuP+EB5MXjf16",
	"tZo8whqqJ1APeMWu2EiXITXuWdsKz2fyHTnIJdmf1juuLdvWiH41Wbdb/J0wVU19TrOqUKBbjdpBXmLp",
	"OGXqqhAGdOoxyzL8RoAapEiT1ttBoJMP+uJzDjVIokkE93mquyDZK7iQirST/EES0dvZvftKMcP3J+bl",
	"2/39hjKbRAUlfxZgB2g+36nBF6zyeJxKNUlnjhG+X1F4KKsve0NMv5I0rVRvR2ypJNO5V9G5nolZ1YKO",
	"jC81FN0NSdPXYfXt6vDsdPmqg/N6iXRxQbcO2xEBt64RNvECRdUk5ztii/5YpOMMz7QORCN3wB7bt8eC",
	"RYcbRyUXbdyYHP3OCOVuTpFXzX2dJ87U5Zx3Ki2HfJvmPEJjnZqRG7PlJJj7pmwHGSjWF6aBd5XnVKoa",
	"QlFG0pTYRkMdvqxOuas5sq2yj/72nC1XHd+r0YiWVSZ9UHZAlZKM1KGqOi3tK3NwvZZJT3AQaKpvcgwY",
	"zvohjUoah9wiXyCz0ssZIZOdLtFOxNK5S88umaFpgSYNwar/1ESypS2tB+zVU2R8NIroN42QyfqZvGv/",
	"7RuV9dz17AsH23RLv0bvh57YWinpphXgU3t9pgdFzRjTseUYUyMmuofhLilvf59taOxfXxmXcJhxEAvo",
	"ySL9bIbUxBLuJRhNRqSwfQdMK8aRbPS5XPd5HIx68nVSGIADmTf2jQ4Smo5YPh4qTX0DuURYN6Osmk/q",
	"VgX3Riv/9LOyqwZasTfqE0ZejzXUqMHsE/nCL4CDlez3sa96v4GmMx++QAe40bH15V5KWLX8ZMG6b1RH",
	"e/1wwyx+DtJvqtvshruHLsL9JNG9U1TeVRupWrNY5t1DxzhNtdm6IEKZZAuWoKxIJclTsE0O2C3wO06k",
	"7XdwcXE6QYBj02QNFcJ8Dq7k2++9JlxpuDH3c0bUe4YywKKwVcRua05T740U4ouyz/DznzK1vsbNBgxq",
	"c9XBUdHDx5ctvus8htpdQjf5BRAL5dVWTiNhWbPsmWpn/95sdAk4G5nAH3S5L+yLp0x50IVMj8x0MBt6",
	"uhu1ZmVbHxlrWTjqmSOVSTYYRS43NEiy6mVD+YTiBmWHtK7QweiC7qunZhObnPFoVnH4evnsUsE6usij",
	"J4PF55RdGIzB3hmjzMaDrcPQZTeaqmplNeI4hlw6b/7F3dlvg2Vqamb6ULWAGVsF0sFMZkTJThd+a5n1",
	"7B+vK834iE2tddQ2akGeX7J7L1W7hVp9thMy7E45bO8+td7r7InvUV/oYfAZjILDdORR8DqY5jWeKN/A",
	"KTE1vzE2fbD9wlY9sQHd2MXv1zKK6cwPNL0v25FtzoGTwdGu6VngoDkIaxhD2oX3KwrfLGWnVZu7zivb",
	"RmuarqqfITKfu5ZzT0Ls1n3vCU3gvur4YqNB164jYefVaNlc0G9/G8p5YHPxz9lMQEfiw9pZDx0XwKn+",
	"feTJSC1W/qDybrMo6l0u17qKLdH6MmM2YXkcG8rZQEJ1U6XpwwKLRX8JHqa22yFKCb3RUVmMJOamJaIi",
	"q/mFOMfjeAnmnRgpvb+UXaAeKbOajXOsC0wtFy/MtN2Z5QNdp0bFJd7uhr+9fpgdtoFPF9uqkrmHmuct",
	"lb6BvIPdycftwToFa721FV8OvuVStdZR94sBtgL0eokYBcQ4yhg3ZY4aE6NKQexP9W+WrFP9VFTr90SX",
	"ukmVOhMDp/VxwQXjCvOitDB1hcuMs6wDWRTu5YXfUmwcttoZj3qDutWcPqhQDhzl5qdytpTt6G7tzfvS",
	"DHi7y9SqH4WIz3Axc3tQD/g/Npb75eA5orlfDl6u921x8E0VJw4ci0/itXuc9hL89h0zumtAPJ7NX1bY",
	"4LGMpSfkt46QuvG6br8pDqdTnJM9OLjew3keeTM8VHeL1dXaQ6OEtP5Q34P6f9f60fkvXHub1dXq/wIA",
	"AP//WQcru1maAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
